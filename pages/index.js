import { PrismaClient } from "@prisma/client";
import Head from "next/head";
import { useEffect, useState } from "react";
import ContactCard from "../components/ContactCard";
import Form from "../components/Form";

const prisma = new PrismaClient();

export const getServerSideProps = async function () {
  const contacts = await prisma.contact.findMany({ orderBy: { firstName: "asc" } });

  return {
    props: {
      initialContacts: contacts,
    },
  };
};

export default function Home({ initialContacts }) {
  const [contacts, setContacts] = useState(initialContacts);
  const [selectedContact, setSelectedContact] = useState(false);

  const saveContact = async function (contact) {
    const response = await fetch("/api/contacts/create", {
      method: "POST",
      body: JSON.stringify(contact),
    });

    if (!response.ok) {
      throw new Error(response.statusText);
    }

    return await response.json();
  };

  const updateContact = async function (contact) {
    const response = await fetch("/api/contacts/update", {
      method: "POST",
      body: JSON.stringify(contact),
    });

    if (!response.ok) {
      throw new Error(response.statusText);
    }

    return await response.json();
  };

  const deleteContact = async function (id) {
    const response = await fetch("/api/contacts/delete", {
      method: "POST",
      body: JSON.stringify(id),
    });

    if (!response.ok) {
      throw new Error(response.statusText);
    }

    return await response.json();
  };

  const handleFormSubmit = async function (data) {
    try {
      if (selectedContact !== false) {
        // Update
        const newContact = {
          id: contacts[selectedContact].id,
          firstName: data.firstName,
          lastName: data.lastName,
          phone: data.phone,
          email: data.email,
        };

        await updateContact(newContact);

        let newContactsArray = [...contacts];

        newContactsArray[selectedContact].firstName = newContact.firstName;
        newContactsArray[selectedContact].lastName = newContact.lastName;
        newContactsArray[selectedContact].phone = newContact.phone;
        newContactsArray[selectedContact].email = newContact.email;

        const sortedContacts = sortContactsByFirstName(newContactsArray);
        setContacts(sortedContacts);
        setSelectedContact(false);
      } else {
        // Create
        const contactData = { firstName: data.firstName, lastName: data.lastName, phone: data.phone, email: data.email };
        const newContact = await saveContact(contactData);

        const sortedContacts = sortContactsByFirstName([...contacts, newContact]);
        setContacts(sortedContacts);
      }
    } catch (err) {
      alert(err);
    }
  };

  const handleFormCancel = function () {
    setSelectedContact(false);
  };

  const handleFormDelete = async function () {
    setContacts((prevContacts) => [...prevContacts.slice(0, selectedContact), ...prevContacts.slice(selectedContact + 1, prevContacts.length)]);
    await deleteContact(contacts[selectedContact].id);
    setSelectedContact(false);
  };

  const sortContactsByFirstName = function (contacts) {
    const sortedContacts = contacts.sort((a, b) => a.firstName.localeCompare(b.firstName));
    return sortedContacts;
  };

  return (
    <div className="bg-teal-50">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="max-w-[600px] m-auto py-5">
        <div className="text-xl text-center mb-2">Contacts App</div>
        <div className="rounded-lg bg-white drop-shadow-md overflow-clip flex">
          <div className="bg-teal-600 basis-1/2 pt-3 pb-5">
            <div className="text-lg uppercase text-center pb-3 text-teal-50">{selectedContact ? "Update Contact" : "Add Contact"}</div>
            <Form onSubmit={handleFormSubmit} onCancel={handleFormCancel} onDelete={handleFormDelete} selectedContact={contacts[selectedContact]} />
          </div>
          <div className="basis-1/2 bg-red-50 pt-3 pb-5 px-5">
            <div className="text-lg uppercase text-center pb-3">Contacts</div>
            {contacts.map((contact, index) => {
              return (
                <div key={index}>
                  <ContactCard
                    contact={contact}
                    contactKey={index}
                    onClick={(contactKey) => {
                      setSelectedContact(contactKey);
                    }}
                  />
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
}
